{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Auto Scaling Application Stack for CSYE 6225 - Fall 2018",
  "Parameters": {
    "NetworkStackNameParameter": {
      "Description": "Network Stack Name",
      "Type": "String"
    },
    "KeyName": {
      "Description": "EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "DomainNameParameter": {
      "Description": "Domain name for s3",
      "Type": "String"
    },
    "RDSUserName": {
      "Description":"Username for RDS instance",
      "Type":"String"
    },
    "RDSPassword":{
      "Description": "Password for RDS instance",
      "Type": "String"
    },
    "HostedZoneId":{
      "Description": "Hosted zone id for record set",
      "Type": "String"
    },
    "SSLCertificateId":{
      "Description": "ID of ssl certificate",
      "Type": "String"
    },
    "IPAddressToBlock":{
      "Description":"Blacklist IP Address",
      "Type":"String"
    }
  },
  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${DomainNameParameter}.csye6225.com"
        }
      }
    },
    "SNSTopic" : {
       "Type" : "AWS::SNS::Topic",
       "Properties" : {
          "Subscription" : [
             { "Endpoint" :{"Fn::Sub" : "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:lambda"}, "Protocol" : "lambda" }
          ],
          "TopicName" : "password_reset"
       }
    },
    "ElasticLoadBalancerV2":{
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : "LoadBalancer",
        "Scheme" : "internet-facing",
        "LoadBalancerAttributes":[{
          "Key" : "idle_timeout.timeout_seconds",
          "Value" : "60"
        }],
        "SecurityGroups":[{
          "Ref":"LoadBalancerSecurityGroup"
        }],
        "Subnets" : [ {"Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackNameParameter}-PublicSubnetID1"}},
                      {"Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackNameParameter}-PublicSubnetID2"}}],
        "Tags" : [
            {
              "Key" : "Name",
              "Value" : "csye6225-elasticLoadBalancer"
            }
        ],
        "Type" : "application"
      }
    },
    "DNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "AliasTarget": {
            "DNSName": {
              "Fn::GetAtt": [
                  "ElasticLoadBalancerV2",
                  "DNSName"
                ]
              },
              "HostedZoneId":{
                "Fn::GetAtt": [
                  "ElasticLoadBalancerV2",
                  "CanonicalHostedZoneID"
                ]
              }
         },
         "HostedZoneId" : {
           "Fn::Sub":"${HostedZoneId}"
         },
         "Name" : {
           "Fn::Sub":"${DomainNameParameter}"
          },
         "Type" : "A"
      }
    },
    "LoadBalancerListener":{
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "Certificates" : [
          {
            "CertificateArn" : {
              "Fn::Sub":"arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${SSLCertificateId}"
            }
          }
        ],
        "DefaultActions" : [
          {
            "TargetGroupArn" : {"Ref":"LoadBalancerTargetGroup"},
            "Type" : "forward"
          }
        ],
        "LoadBalancerArn" :{"Ref":"ElasticLoadBalancerV2"},
        "Port" : 443,
        "Protocol" : "HTTPS"
      }
    },
    "LoadBalancerTargetGroup":{
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "Name" : "AutoScalingGroup",
        "Port" : 3001,
        "Protocol" : "HTTP",
        "VpcId" : {"Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackNameParameter}-VpcID"}},
        "Tags" : [
          {
            "Key" : "Name",
             "Value" : "LoadBalancerTargetGroup"
          }
        ]
      }
    },
    "LaunchConfig":{
       "Type" : "AWS::AutoScaling::LaunchConfiguration",
       "Properties" : {
          "AssociatePublicIpAddress" : true,
          "IamInstanceProfile" : "EC2InstanceProfile",
          "ImageId" : "ami-9887c6e7",
          "InstanceType" : "t2.micro",
          "KeyName" : {"Fn::Sub": "${KeyName}"},
          "LaunchConfigurationName" : "asg_launch_config",
          "SecurityGroups" : [{"Ref":"WebServerSecurityGroup"}],
          "BlockDeviceMappings":[
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": 20,
                "VolumeType": "gp2"
              }
            }
          ],
          "UserData" : {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "#!/bin/bash -xe ",
                  "cd /home/centos",
                  "touch .log",
                  "curl --silent --location https://rpm.nodesource.com/setup_8.x | bash - >> .log",
                  "echo 'installing node' >> .log",
                  "yum -y install nodejs >> .log",
                  "touch .env",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "export RDS_HOSTNAME=",
                        {
                          "Fn::GetAtt": [
                            "RDSInstance",
                            "Endpoint.Address"
                          ]
                        }
                      ]
                    ]
                  },
                  "echo $RDS_HOSTNAME >> .env",
                  {
                    "Fn::Join":[
                      "",
                      [
                        "export RDS_USERNAME=",
                        {
                          "Fn::Sub": "${RDSUserName}"
                        }
                      ]
                    ]
                  },
                  "echo $RDS_USERNAME >> .env",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "export RDS_PASSWORD=",
                        {
                          "Fn::Sub": "${RDSPassword}"
                        }
                      ]
                    ]
                  },
                  "echo $RDS_PASSWORD >> .env",
                  "export RDS_PORT=3306",
                  "echo $RDS_PORT >> .env",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "export S3_BUCKET=",
                        {
                          "Fn::Sub": "${DomainNameParameter}.csye6225.com"
                        }
                      ]
                    ]
                  },
                  "echo $S3_BUCKET >> .env",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "export TOPIC=",
                        {
                          "Fn::Sub" : "arn:aws:sns:us-east-1:${AWS::AccountId}:password_reset"
                        }
                      ]
                    ]
                  },
                  "echo $TOPIC >> .env",
                  "echo 'Yum update' >> .log",
                  "yum -y update >> .log",
                  "echo 'installing ruby' >> .log",
                  "yum -y install ruby",
                  "echo 'installing wget' >> .log",
                  "yum -y install wget",
                  "echo 'getting code deploy agent' >> .log",
                  "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install >> .log",
                  "chmod +x ./install >> .log",
                  "./install auto >> .log",
                  "echo 'installing cloudwatch agent' >> .log",
                  "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm >> .log",
                  "rpm -U ./amazon-cloudwatch-agent.rpm",
                  "echo 'Cloudwatch agent installed' >> .log",
                  "cd /opt && touch cloudwatch-config.json",
                  "echo '{\"agent\":{\"metrics_collection_interval\":10,\"logfile\":\"\/var\/logs\/amazon-cloudwatch-agent.log\"},\"logs\":{\"logs_collected\":{\"files\":{\"collect_list\":[{\"file_path\":\"\/home\/centos\/.pm2\/logs\/server-out.log\",\"log_group_name\":\"server-out.log\"}]}}},\"metrics\":{\"metrics_collected\":{\"statsd\":{\"metrics_aggregation_interval\":0,\"metrics_collection_interval\":10,\"service_address\":\":8125\"}}}}' >> cloudwatch-config.json",
                  "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s >> .log",
                  "sysmtcl restart amazon-cloudwatch-agent-ctl >> .log",
                  "echo 'installing finished' >> .log"
                ]
              ]
            }
          }
       }
    },
    "WebServerGroup":{
       "Type" : "AWS::AutoScaling::AutoScalingGroup",
       "Properties" : {
          "AutoScalingGroupName" : "WebServerGroup",
          "AvailabilityZones" : ["us-east-1a","us-east-1b"],
          "Cooldown" : "60",
          "DesiredCapacity" : "3",
          "LaunchConfigurationName" : {"Ref":"LaunchConfig"},
          "HealthCheckGracePeriod":60,
          "HealthCheckType":"EC2",
          "MaxSize" : "10",
          "MinSize" : "3",
          "VPCZoneIdentifier":[
            {"Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackNameParameter}-PublicSubnetID1"}},
            {"Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackNameParameter}-PublicSubnetID2"}}
          ],
          "TargetGroupARNs": [{"Ref":"LoadBalancerTargetGroup"}],
          "Tags" : [
            {
              "Key" : "Name",
              "Value" : "WebServerGroup",
              "PropagateAtLaunch" : "true"
            },{
              "Key": "CodeDeployTag",
              "Value": "Deploy",
              "PropagateAtLaunch" : "true"
            }
          ]
       },
       "DependsOn" : "LoadBalancerTargetGroup"
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": ["CodeDeployEC2ServiceRole"],
        "InstanceProfileName": "EC2InstanceProfile"
      }
    },
    "EC2SNS": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                  "sns:Publish"
              ],
              "Resource": "arn:aws:sns:*:*:*"
          }
          ]
        },
        "PolicyName": "EC2SNS",
        "Roles": [
          "CodeDeployEC2ServiceRole"
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-loadbalancer",
        "GroupDescription": "Enable HTTPS access via port 443",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackNameParameter}-VpcID"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
            }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-LoadBalancerSecurityGroup"
            }
          }
        ]
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-webapp",
        "GroupDescription": "Enable HTTP access via port 80, SSH access via port 22, HTTPS access via port 443",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackNameParameter}-VpcID"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3001,
            "ToPort": 3001,
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-WebAppSecurityGroup"
            }
          }
        ]
      }
    },
    "DBServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-rds",
        "GroupDescription": "Allow TCP traffic on port 3306 for MySQL",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackNameParameter}-VpcID"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "SourceSecurityGroupId": {
              "Ref": "WebServerSecurityGroup"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-DBSecurityGroup"
            }
          }
        ]
      }
    },
    "RDSSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for RDS Instances",
        "SubnetIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NetworkStackNameParameter}-PublicSubnetID1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NetworkStackNameParameter}-PrivateSubnetID1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-RDSSubnetGroup"
            }
          }
        ]
      }
    },
    "RDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "csye6225",
        "AllocatedStorage": "100",
        "DBInstanceClass": "db.t2.medium",
        "Engine": "MySQL",
        "MasterUsername": {
          "Fn::Sub": "${RDSUserName}"
        },
        "MasterUserPassword": {
          "Fn::Sub": "${RDSPassword}"
        },
        "MultiAZ": false,
        "DBInstanceIdentifier": "csye6225-fall2018",
        "PubliclyAccessible": false,
        "Port": "3306",
        "DBSubnetGroupName": {
          "Ref": "RDSSubnetGroup"
        },
        "VPCSecurityGroups":[
          {"Ref":"DBServerSecurityGroup"}
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-RDSInstance"
            }
          }
        ]
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        },
        "TableName": "csye6225",
        "TimeToLiveSpecification":{
            "AttributeName" : "TTL",
            "Enabled" :true
          },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-DynamoDBTable"
            }
          }
        ]
      }
    },
    "EC2S3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${DomainNameParameter}.csye6225.com/*"
                },{
                  "Fn::Sub": "arn:aws:s3:::${DomainNameParameter}.csye6225.com"
                }
              ]
            },{
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        },
        "PolicyName": "EC2-S3",
        "Roles": [
          "CodeDeployEC2ServiceRole"
        ]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "10",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 92% for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "8",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "MyWebACLAssociation": {
      "Type": "AWS::WAFRegional::WebACLAssociation",
      "Properties": {
        "ResourceArn": {"Ref": "ElasticLoadBalancerV2"},
        "WebACLId": {"Ref": "WebACL"}
      }
    },
    "WebACL":{
      "Type" : "AWS::WAFRegional::WebACL",
      "Properties" : {
        "DefaultAction" : {
          "Type" : "ALLOW"
        },
        "MetricName" : "WebACL",
        "Name" : "WebACL",
        "Rules" : [
        {
          "Action": {
            "Type": "BLOCK"
          },
          "Priority": 1,
          "RuleId": {"Ref":"SizeRestrictionRule"}
        },
        {
          "Action": {
            "Type": "BLOCK"
          },
          "Priority": 2,
          "RuleId": {"Ref":"BlackListIPRule"}
        },
        {
          "Action": {
            "Type": "BLOCK"
          },
          "Priority": 3,
          "RuleId":{"Ref":"SQLInjectionRule"}
        }
      ]
    }
    },
    "SQLInjection":{
      "Type" : "AWS::WAFRegional::SqlInjectionMatchSet",
      "Properties" : {
        "Name" : "SQLInjection for our web application",
        "SqlInjectionMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "SQLInjectionRule":{
      "Type" : "AWS::WAFRegional::Rule",
      "Properties" : {
        "MetricName" : "SQLInjectionRule",
        "Name" : "SQLInjectionRule",
        "Predicates" : [
          {
          "DataId" : {"Ref":"SQLInjection"},
          "Negated" : false,
          "Type" : "SqlInjectionMatch"
        }
       ]
      }
    },
    "BlackListIPSet":{
      "Type" : "AWS::WAFRegional::IPSet",
      "Properties" : {
        "IPSetDescriptors" : [
          {
            "Type" : "IPV4",
            "Value" : {"Ref":"IPAddressToBlock"}
          }
          ],
          "Name":"BlackListIPSet"
        }
    },
    "BlackListIPRule":{
      "Type" : "AWS::WAFRegional::Rule",
      "Properties" : {
        "MetricName" : "IPSetRule",
        "Name" : "IPSetRule",
        "Predicates" : [
          {
          "DataId" : {  "Ref" : "BlackListIPSet" },
          "Negated" : false,
          "Type" : "IPMatch"
        }
       ]
      }
    },
    "SizeRestrictionSet":{
      "Type" : "AWS::WAFRegional::SizeConstraintSet",
      "Properties" : {
        "Name" : "SizeRestrictionSet",
        "SizeConstraints" : [
            {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "4096"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size":"1024"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "102400"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size":"4093"
          }
        ]
      }
    },
    "SizeRestrictionRule":{
      "Type":"AWS::WAFRegional::Rule",
      "Properties" : {
        "MetricName" : "SizeRestrictionRule",
        "Name" : "SizeRestrictionRule",
        "Predicates" : [
          {
          "DataId" : {"Ref":"SizeRestrictionSet"},
          "Negated" : false,
          "Type" : "SizeConstraint"
        }
       ]
      }
    }
  },
  "Outputs": {
    "WebServerGroup": {
      "Description": "AutoScaling application",
      "Value": {
        "Ref": "WebServerGroup"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-WebServerGroup"
        }
      }
    },
    "WebServerSecurityGroup": {
      "Description": "The security group id for the Web Server",
      "Value": {
        "Ref": "WebServerSecurityGroup"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-WebServerSecurityGroupID"
        }
      }
    },
    "DBServerSecurityGroup": {
      "Description": "The security group id for the RDS Server",
      "Value": {
        "Ref": "DBServerSecurityGroup"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DBServerSecurityGroupID"
        }
      }
    },
    "RDSInstance": {
      "Description": "The RDS Instance for Backend Database",
      "Value": {
        "Ref": "RDSInstance"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RDSInstanceID"
        }
      }
    },
    "DynamoDBTable": {
      "Description": "The DynamoDBTableId",
      "Value": {
        "Ref": "DynamoDBTable"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DynamoDBTableID"
        }
      }
    },
    "S3Bucket": {
      "Description": "The S3Bucket",
      "Value": {
        "Ref": "S3Bucket"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-S3BucketID"
        }
      }
    }
  }
}
